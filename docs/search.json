[
  {
    "objectID": "vscode.html",
    "href": "vscode.html",
    "title": "Setting up VS code",
    "section": "",
    "text": "VSC offers a bunch of command line options. Below are commands that you can paste into your shell and watch what happens.\ncode --list-extensions\nThese are the extensions that we need for our work.\ncode --install-extension quarto.quarto\ncode --install-extension ms-python.python\ncode --install-extension ms-python.python\ncode --install-extension ms-toolsai.jupyter\nOnce the extensions are installed, we need to tune the settings to make VSC work for us.\nThe “Setting” menu can be accessed from the bottom left of the screen, or directly by pressing ctrl-, (control-comma) or on Mac (command-comma)\nOnce the little command prompt line opens up, search for the appropriate setting by entering in the keywords provided below. Then make the appropriate change. I believe that it sticks when you leave the cell - I haven’t seen a “save” button.\n\nVSC: settings to use powershell: set to NULL\n\nPaste the keywords below into a VSC setting search.\nterminal integrated default profile windows\n\nVSC: setting to show current virtual environment: set to ALWAYS\n\nPaste the keywords below into a VSC setting search.\npython interpreter info"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Installing Software",
    "section": "",
    "text": "Operating systems offer tools for installing software OUTSIDE the GUI.\n\napt, yum, dmf and other tools are used on linux,\nhomebrew is used on mac, but can also run on linux, and\nchocolatey and winget are used on windows.\n\n\nPick your OS -&gt;WindowsMacLinux\n\n\nSelect your OS from the tabs shown.\n\n\nPowershell -command Invoke-WebRequest -Uri \"https://chocolatey.org/install.ps1\" -OutFile $env:temp\\install.ps1\npowershell -executionpolicy unrestricted -command Unblock-File $env:temp\\install.ps1; powershell -command $env:temp\\install.ps1\nUnattended install of tools\nchoco install quarto -y\nchoco install git.install -y\nchoco install gh -y\nchoco install visualstudiocode -y\nchoco install make -y\nchoco install powershell-core -y\n\n\n(needs work!)\n\n\n(needs work!)"
  },
  {
    "objectID": "quarto.html",
    "href": "quarto.html",
    "title": "Quarto",
    "section": "",
    "text": "Quarto is a multi-language, next generation version of R Markdown from Posit, with many new new features and capabilities. Like R Markdown, Quarto uses knitr to execute R code, and is therefore able to render most existing Rmd files without modification.\nVisit this site to install Quarto:\nhttps://quarto.org/docs/get-started/\nHere is a link directly to the VSCODE install page:\nhttps://quarto.org/docs/get-started/hello/vscode.html"
  },
  {
    "objectID": "quarto.html#safety-tips",
    "href": "quarto.html#safety-tips",
    "title": "Quarto",
    "section": "Safety tips!",
    "text": "Safety tips!\n\nInstall pyenv/python and VSC first\nInstall the vscode QUARTO extension (see the docs)\nDon’t just stop at installing the software. RTFM\nFINISH THE PAGE - you’ll see that there are several additional steps (like pip install jupyter matplotlib plotly)\n\nYou should be able to replicate the example in their guide."
  },
  {
    "objectID": "quarto.html#troublshooting",
    "href": "quarto.html#troublshooting",
    "title": "Quarto",
    "section": "Troublshooting",
    "text": "Troublshooting\nYou can verify that all was installed correctly (except the VSC stuff) using the quarto check command.\n\nquarto check"
  },
  {
    "objectID": "prework.html",
    "href": "prework.html",
    "title": "Pre-work",
    "section": "",
    "text": "It’s helpful to do these things prior to installing any software, but it’s OK to do them after stuff is installed. It may help fix a problem!\nOn windows we need to ensure that several features are disabled. On mac and linux, you should be good to go."
  },
  {
    "objectID": "prework.html#os-specific-customizations",
    "href": "prework.html#os-specific-customizations",
    "title": "Pre-work",
    "section": "OS-specific customizations",
    "text": "OS-specific customizations\n\nPick your OS -&gt;MacLinuxWindows\n\n\nSelect from one of the tabs above to see if your OS requires any unique fixes.\n\n\nIn NASCAR you’re called the lucky dog\nI’m not aware of any Mac specific fixes that are required.\n\n\nI’m not aware of any Linux-specific pre-work required to get all this stuff running.\n\n\nSorry - you’ve got some work to do!\nWindows offers a number of settings that makes it easier to download software from the Micrsoft Store. These features actually get in the way of user installed tools.\n\nDisable python-related execution aliases\n\n\nOpen the execution alias screen\n\nPress the windows key on the bottom left of your keyboard to bring up the menu shown below.\nIn the search bar enter execution and then select the option as show in the figure below.\n\n\n\n\nScan the list\nYour list may vary depending on you have installed. Scan the list and disable stuff that looks related to python.\n\n\nYour done!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Our goal is pyenv, python, poetry, vscode and quarto working seamlessly with python virtual environments from a command line.\nGetting your machine ready for software development can sometime be challenging, especially if over time you’ve accumulated lots of software on your computer.\nThis site offers a process for preparing your computer for python development using VS code and Quarto from the command line. Those on Mac (zsh shell) and Linux (bash shell) have an easier time. Those on Windows have a tougher time because of the multitude of shells (e.g., CMD, powershell-5 or powershell-core)."
  },
  {
    "objectID": "index.html#about-this-site",
    "href": "index.html#about-this-site",
    "title": "Welcome",
    "section": "About this site",
    "text": "About this site\nEach section on the site offers guidance on individual installation and configuration steps. The final steps section offers guidance on getting them all work together."
  },
  {
    "objectID": "index.html#glossary-of-terms",
    "href": "index.html#glossary-of-terms",
    "title": "Welcome",
    "section": "Glossary of terms",
    "text": "Glossary of terms\nTo eliminate confusion I’ll be using the following terms on this site:\n\nVSC\n\nvisual studio code. An awesome code editor and more. See IDE below.\n\nterminal\n\nA command line windows NOT inside VSC. On windows we’ll use a terminal window with powershell. On mac you’ll use terminal window with ZSH. On linux you’ll use a terminal windows with bash.\n\nGUI\n\na graphic user interface, often directly associated with the underlying operating system.\n\nIDE\n\nan integrated development environment. While very handy when learning to code, they quickly become a crutch for software engineers and coders. PyCharm is one example of an IDE.\n\n\nIn closing, VSC is NOT an IDE although many people use it like an IDE. VSC includes many features of an IDE and is very extensible. However, VSC can also be used as a regular code editor, like VIM, EMACS or others. Learn to use VSC from the command line!"
  },
  {
    "objectID": "index.html#checklist",
    "href": "index.html#checklist",
    "title": "Welcome",
    "section": "Checklist",
    "text": "Checklist\nIf your system is not working or if you’re starting from scratch, here is a general checklist:\n\nWINDOWS: disable python-related app execution aliases.\nVerify that you can open a terminal NOT IN VSC.\nVerify pyenv and python, quarto, poetry and VSC from a terminal.\nInstall and test missing pyenv, python, poetry, quarto and VSC.\nVerify environment variables are properly set using the $PROFILE (windows), .zschrc (mac), .bashrc (linux) files.\n\nIf the tools are completely installed in the correct order, everything should work out of the box in mac and linux. The PC will require a few more tweaks. (See final steps)"
  },
  {
    "objectID": "index.html#troubleshooting",
    "href": "index.html#troubleshooting",
    "title": "Welcome",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nFor the most part everyone has their tools already installed and the challenge is getting them to all work together. Here are some tips:\n\nBe patient and methodical. Debugging can be frustrating. YOU GOT THIS!\nGet everything running outside of VSC before you try running inside VSC. (See terminal)\nVerify that you did ALL the required install steps. I’ve seen people not read the instructions completely and are left with half-working software. This is VERY hard to debug!\nVerify that the individual tools are working by themselves.\nUse quarto check to see how things are working together.\nOnce everything runs from a terminal then jump inside VSC to get it all running there.\nIf you still have trouble, consider uninstalling/remove the tools and starting over.\n\nMany of the problems that I’ve seen result from not completing the install. For most software engineering tools, simply installing the software is only the first part.\nMany software tools require second or third steps that make the use of the installed software easier from the command line. RTFM"
  },
  {
    "objectID": "index.html#what-do-i-do-now",
    "href": "index.html#what-do-i-do-now",
    "title": "Welcome",
    "section": "What do I do now?",
    "text": "What do I do now?\nI’m here because my system isn’t working. How do I get started? What do I do now? Start with the Checklist!"
  },
  {
    "objectID": "finalsteps.html",
    "href": "finalsteps.html",
    "title": "Final steps",
    "section": "",
    "text": "Ok, you’ve got everything installed and tests separately, but things still are working.\nThis is the trickets part, but the most important from a quality-of-life perspective."
  },
  {
    "objectID": "finalsteps.html#update-environment-variables",
    "href": "finalsteps.html#update-environment-variables",
    "title": "Final steps",
    "section": "Update Environment variables",
    "text": "Update Environment variables\n\nPick your OS -&gt;MacLinuxWindows\n\n\nSelect your OS from one of the tabs.\n\n\n(add stuff here)\n\n\n(add stuff here)\n\n\n\ncode $profile\nthen add:\n\n$env:DENO_NO_UPDATE_CHECK=1               # to warning about deno upgrades\n$env:DENO_TLS_CA_STORE=\"system\"           # to stop the BAD CERTIFICATE deno warning\n$env:PYDEVD_DISABLE_FILE_VALIDATION=1     # for Python 3.11 above, to disable warning message RE: debugging\n$env:VIRTUAL_ENV_DISABLE_PROMPT=0         # disable venv prompt change\n\n$env:QUARTO_PYTHON=$(pyenv which python)  # to work with pyenv\n$var = $(poetry env info -e 2&gt; $null)\nif ($var -ne $null) {\n  Write-Output \"Setting QUARTO_PYTHON for detected Poetry VENV\"\n  $env:QUARTO_PYTHON=$var                 # to work with venv in pyenv\n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "goal.html",
    "href": "goal.html",
    "title": "Goal",
    "section": "",
    "text": "Our goal is pyenv, python, poetry, vscode and quarto working seamlessly with python virtual environments from a command line.\nThe video below offers a glimpse of what a typical homework assignment should look like."
  },
  {
    "objectID": "poetry.html",
    "href": "poetry.html",
    "title": "Getting started with pyenv",
    "section": "",
    "text": "Poetry should be installed outside of your current version python, that is DO NOT USE pip install poetry. Why? If you install using pip then the command poetry shell will most probably fail.\nBelow are links to the instructions on the web.\n\nWindows install of poetry\nMac install of poetry\nLinux install of pietry\n\nI summarize the installs in the tabset below. The instructions below were accurate at the time they were included in this document, but over time things may change. Refer to the links above."
  },
  {
    "objectID": "pyenv.html",
    "href": "pyenv.html",
    "title": "Installing pyenv",
    "section": "",
    "text": "pyenv is a manager program for python. It lets you maintain several different versions of python on your computers. This is GREAT if you’re developing more than one program over a longer period of time. Pythons change and you don’t want to have to constantly update older code when things change.\n\nInstall software\nLink to install instructions here\n# open an administrator Window\n\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine;\nInvoke-WebRequest -UseBasicParsing -Uri \"https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\" -OutFile \"./install-pyenv-win.ps1\"; &\"./install-pyenv-win.ps1\";"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Learning about VS Code virtual environments\nUnattended install of chocolatey"
  },
  {
    "objectID": "references.html#references",
    "href": "references.html#references",
    "title": "References",
    "section": "",
    "text": "Learning about VS Code virtual environments\nUnattended install of chocolatey"
  },
  {
    "objectID": "terminals.html",
    "href": "terminals.html",
    "title": "Using a terminal",
    "section": "",
    "text": "Many of the problems that I see originate in VSC! The best way to make sure that everything is working is start with a command line terminal - a separate window OUTSIDE of VSC. Then we’ll get VSC working.\n\nLearn to work from a shell\nLearn to work without a mouse\n\nThis will help as you begin to create dev-ops actions and build docker containers. Containers don’t have GUI!\n\nAn example shell\nHere is an example shell. On any machine these can be opened using keystrokes only. Learn how!\n\n\n\nGetting to your shell without a mouse\nHere is some tips for opening a terminal without having to take your fingers off your keyboard.\n\nPick your OS -&gt;WindowsMacLinux\n\n\nSelect your OS from the tabs above.\n\n\nPress the windows key on the lower left of your keyboard.\nWithout touching the mouse start typing the keyword powershell into the search bar. You only need to enter the first few letters, then hit enter. The menu will learn from your keystrokes and eventually it will be the first option that shows up.\n\n\n\nPress %command% and [space-bar] at the same time. A mini search bar will appear on your screen.\nWithout touching the mouse starting typing the keyword terminal into the search bar. You only need to enter the first few letters, then hit enter.\n\n\n\nGetting to your shell without a mouse\nI’m sure it can, but it depends on your flavor of linux and the GUI you installed.\nIf you’re using Linux, I’m pretty sure that you’re good to go!"
  }
]